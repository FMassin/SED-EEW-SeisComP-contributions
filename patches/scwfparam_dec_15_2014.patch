diff --git a/src/sed/apps/scwfparam/config/scwfparam.cfg b/src/sed/apps/scwfparam/config/scwfparam.cfg
index d80bb93..7040d2f 100644
--- a/src/sed/apps/scwfparam/config/scwfparam.cfg
+++ b/src/sed/apps/scwfparam/config/scwfparam.cfg
@@ -52,6 +52,11 @@ wfparam.STALTAratio = 3
 # Specifies the number of seconds around P to be used to check the STA/LTA ratio
 wfparam.STALTAmargin = 5
 
+# Defines the factor applied to the signigicant duration to define the
+# processing spetra time window. If that value is <= 0 the totalTimeWindowLength
+# is used.
+wfparam.durationScale = 1.5
+
 # Specifies a list of damping values for computation of the relative
 # displacement elastic response spectrum in percent.
 wfparam.dampings = 5
@@ -111,23 +116,23 @@ wfparam.filter.loFreq = 0.025
 # get the final corner frequency of the filter.
 wfparam.filter.hiFreq = 40
 
-# Specifies the filter order of the sensitivity correction filter.
-wfparam.sc.order = 4
+# Specifies the filter order of the post-deconvolution filter.
+wfparam.pd.order = 4
 
-# Specifies the frequency of the sensitivity correction hi-pass filter.
+# Specifies the frequency of the post-deconvolution hi-pass filter.
 # If this parameter is equal to 0 the hi-pass filter is not used. If
 # suffix "fNyquist" is used then the value is multiplied by the Nyquist
 # frequency of the data to get the final corner frequency of the filter.
-wfparam.sc.loFreq = 0
+wfparam.pd.loFreq = 0
 
-# Specifies the frequency of the sensitivity correction lo-pass filter.
+# Specifies the frequency of the post-deconvolution lo-pass filter.
 # If this parameter is equal to 0, the lo-pass filter is disabled.
 # If suffix "fNyquist" is used then the value is multiplied by the Nyquist
 # frequency of the data to get the final corner frequency of the filter.
-wfparam.sc.hiFreq = 0
+wfparam.pd.hiFreq = 0
 
-# Enables/disables deconvolution and thus the usage of wfparam.sc.order,
-# wfparam.sc.loFreq and wfparam.sc.hiFreq. If a channel does not provide full
+# Enables/disables deconvolution and thus the usage of wfparam.pd.order,
+# wfparam.pd.loFreq and wfparam.pd.hiFreq. If a channel does not provide full
 # response information it is not used for processing.
 wfparam.deconvolution = true
 
diff --git a/src/sed/apps/scwfparam/descriptions/scwfparam.xml b/src/sed/apps/scwfparam/descriptions/scwfparam.xml
index ab95a17..d4da540 100644
--- a/src/sed/apps/scwfparam/descriptions/scwfparam.xml
+++ b/src/sed/apps/scwfparam/descriptions/scwfparam.xml
@@ -91,6 +91,13 @@
 					Specifies the number of seconds around P to be used to check the STA/LTA ratio.
 					</description>
 				</parameter>
+				<parameter name="durationScale" type="double" default="1.5">
+					<description>
+					Defines the factor applied to the signigicant duration to define the
+					processing spetra time window. If that value is <= 0 the totalTimeWindowLength
+					is used.
+					</description>
+				</parameter>
 				<parameter name="dampings" type="list:double" unit="%" default="5">
 					<description>
 					Specifies a list of damping values (in percent) for computation of
@@ -179,16 +186,17 @@
 						</description>
 					</parameter>
 				</group>
-				<group name="sc">
+				<group name="pd">
 					<description>
-					Parameters of the 2nd stage (sensitivity correction) filter.
+					Parameters of the post-deconvolution filter applied in the
+					frequency domain.
 					</description>
 					<parameter name="order" type="int" default="4">
 						<description>
 						Specifies the order of the 2nd stage filter.
 						</description>
 					</parameter>
-					<parameter name="loFreq" type="double" default="0.025">
+					<parameter name="loFreq" type="double" default="0">
 						<description>
 						Specifies the frequency of the 2nd stage hi-pass filter. If this
 						parameter is equal to 0 the hi-pass filter is not used.
@@ -197,7 +205,7 @@
 						frequency of the filter.
 						</description>
 					</parameter>
-					<parameter name="hiFreq" type="double" default="40">
+					<parameter name="hiFreq" type="double" default="0">
 						<description>
 						Specifies the frequency of the 2nd stage lo-pass filter. If this
 						parameter is equal to 0 the lo-pass filter is not used.
@@ -480,6 +488,9 @@
 				<option long-flag="offline">
 					<description>Do not connect to the messaging and to the database</description>
 				</option>
+				<option long-flag="force">
+					<description>Force event processing even if a journal entry exists that processing has completed</description>
+				</option>
 				<option long-flag="dump-config">
 					<description>Dump the configuration and exit</description>
 				</option>
diff --git a/src/sed/apps/scwfparam/msg.cpp b/src/sed/apps/scwfparam/msg.cpp
index 9fe1f8e..d2ad5d9 100644
--- a/src/sed/apps/scwfparam/msg.cpp
+++ b/src/sed/apps/scwfparam/msg.cpp
@@ -165,8 +165,8 @@ bool sendMessages(Seiscomp::Communication::Connection *con,
 				string filterID;
 
 				FilterDef scfdef(FilterType(pgavResult->isAcausal,
-				                            pgavResult->scFilterOrder),
-				                 pgavResult->scFilter);
+				                            pgavResult->pdFilterOrder),
+				                            pgavResult->pdFilter);
 
 				filterCacheIt = filterCache.find(scfdef);
 
diff --git a/src/sed/apps/scwfparam/processors/pgav.cpp b/src/sed/apps/scwfparam/processors/pgav.cpp
index 486f89d..db23c7c 100644
--- a/src/sed/apps/scwfparam/processors/pgav.cpp
+++ b/src/sed/apps/scwfparam/processors/pgav.cpp
@@ -469,10 +469,19 @@ void PGAV::setDeconvolutionEnabled(bool e) {
 
 
 // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
-void PGAV::setSensitivityCorrectionFilterParams(int o, double loFreq, double hiFreq) {
-	_config.SCorder = o;
-	_config.loSCFreq = loFreq;
-	_config.hiSCFreq = hiFreq;
+void PGAV::setDurationScale(double s) {
+	_config.durationScale = s;
+}
+// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
+
+
+
+
+// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
+void PGAV::setPostDeconvolutionFilterParams(int o, double loFreq, double hiFreq) {
+	_config.PDorder = o;
+	_config.loPDFreq = loFreq;
+	_config.hiPDFreq = hiFreq;
 }
 // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 
@@ -542,28 +551,28 @@ bool PGAV::setup(const Settings &settings) {
 	settings.getValue(_config.saturationThreshold, "PGAV.saturationThreshold");
 	settings.getValue(_config.useDeconvolution, "PGAV.deconvolution");
 	settings.getValue(_config.noncausal, "PGAV.noncausal");
-	settings.getValue(_config.SCorder, "PGAV.sc.order");
+	settings.getValue(_config.PDorder, "PGAV.pd.order");
 
-	if ( settings.getValue(tmp, "PGAV.sc.loFreq") ) {
+	if ( settings.getValue(tmp, "PGAV.pd.loFreq") ) {
 		if ( Config::freqFromString(tmpVal, tmp) ) {
-			SEISCOMP_ERROR("%s.%s.PGAV.sc.loFreq: invalid value '%s'",
+			SEISCOMP_ERROR("%s.%s.PGAV.pd.loFreq: invalid value '%s'",
 			               settings.networkCode.c_str(),
 			               settings.stationCode.c_str(), tmp.c_str());
 			return false;
 		}
 
-		_config.loSCFreq = tmpVal;
+		_config.loPDFreq = tmpVal;
 	}
 
-	if ( settings.getValue(tmp, "PGAV.sc.hiFreq") ) {
+	if ( settings.getValue(tmp, "PGAV.pd.hiFreq") ) {
 		if ( Config::freqFromString(tmpVal, tmp) ) {
-			SEISCOMP_ERROR("%s.%s.PGAV.sc.hiFreq: invalid value '%s'",
+			SEISCOMP_ERROR("%s.%s.PGAV.pd.hiFreq: invalid value '%s'",
 			               settings.networkCode.c_str(),
 			               settings.stationCode.c_str(), tmp.c_str());
 			return false;
 		}
 
-		_config.hiSCFreq = tmpVal;
+		_config.hiPDFreq = tmpVal;
 	}
 
 	settings.getValue(_config.filterOrder, "PGAV.filter.order");
@@ -932,62 +941,64 @@ void PGAV::process(const Record *record, const DoubleArray &) {
 
 
 	// -------------------------------------------------------------------
-	// Signal duration and aftershock removal
+	// Signal duration
 	// -------------------------------------------------------------------
-	if ( _config.aftershockRemoval ) {
-		DoubleArray Ia;
-		double Ias = M_PI/(2*9.81)*dt;
+	DoubleArray Ia;
+	double Ias = M_PI/(2*9.81)*dt;
 
-		Ia.resize(n);
+	Ia.resize(n);
 
-		// Ia = cumsum(_processedData^2)*Ias
-		double sum = 0;
-		for ( int i = 0; i < n; ++i ) {
-			sum += _data[i]*_data[i];
-			Ia[i] = sum*Ias;
-		}
+	// Ia = cumsum(_processedData^2)*Ias
+	double sum = 0;
+	for ( int i = 0; i < n; ++i ) {
+		sum += _data[i]*_data[i];
+		Ia[i] = sum*Ias;
+	}
 
-		double Imax = Ia[Ia.size()-1];
-		if ( Imax == 0 ) {
-			SEISCOMP_DEBUG(">  asr failed: code 101");
-			setStatus(Error, 101.0);
+	double Imax = Ia[Ia.size()-1];
+	if ( Imax == 0 ) {
+		SEISCOMP_DEBUG(">  asr failed: code 101");
+		setStatus(Error, 101.0);
 #ifndef CONTINUE_PROCESSING_WHEN_CHECK_FAILS
-			return;
+		return;
 #endif
-		}
+	}
 
-		double iImax = 1.0 / Imax;
-		double t05, t95;
+	double iImax = 1.0 / Imax;
+	double t05, t95;
 
-		t05 = 0.1;
-		t95 = 0.1;
+	t05 = 0.1;
+	t95 = 0.1;
 
-		// Ia = Ia / Imax
-		for ( int i = 0; i < n; ++i ) {
-			Ia[i] *= iImax;
-			if ( (Ia[i] > 0.03) && (Ia[i] < 0.05) )
-				t05 = i;
+	// Ia = Ia / Imax
+	for ( int i = 0; i < n; ++i ) {
+		Ia[i] *= iImax;
+		if ( (Ia[i] > 0.03) && (Ia[i] < 0.05) )
+			t05 = i;
 
-			if ( (Ia[i] > 0.93) && (Ia[i] < 0.95) )
-				t95 = i;
-		}
+		if ( (Ia[i] > 0.93) && (Ia[i] < 0.95) )
+			t95 = i;
+	}
 
-		if ( t95 < t05 ) {
-			t95 = n-1;
-		}
+	if ( t95 < t05 )
+		t95 = n-1;
 
-		// Convert to seconds
-		t05 *= dt;
-		t95 *= dt;
+	// Convert to seconds
+	t05 *= dt;
+	t95 *= dt;
 
-		// Store signal duration
-		double sig_dur = t95 - t05;
-		_duration = sig_dur;
+	// Store signal duration
+	_duration = t95 - t05;
 
-		SEISCOMP_DEBUG(">  signal duration = %.2fs, t05 = %.2fs, t95 = %.2fs",
-		               sig_dur, t05, t95);
+	SEISCOMP_DEBUG(">  signal duration = %.2fs, t05 = %.2fs, t95 = %.2fs",
+	               *_duration, t05, t95);
 
-		double d = std::max(Math::round(sig_dur / 3), _config.preEventWindowLength);
+
+	// -------------------------------------------------------------------
+	// Aftershock removal
+	// -------------------------------------------------------------------
+	if ( _config.aftershockRemoval ) {
+		double d = std::max(Math::round(*_duration / 3), _config.preEventWindowLength);
 		int tcut = n;
 
 		int j = 0;
@@ -1020,8 +1031,18 @@ void PGAV::process(const Record *record, const DoubleArray &) {
 		}
 
 		// Clip amplitude computation window to tcut
-		if ( tcut < sig1i )
+		if ( tcut < sig1i ) {
 			sig1i = std::max(0, tcut);
+			SEISCOMP_DEBUG(">  aftershock removal trimmed signal to %fs", sig1i*dt);
+		}
+		else if ( _config.durationScale > 0 ) {
+			sig1i = (int)((t05 + _config.durationScale* *_duration) * _stream.fsamp);
+			SEISCOMP_DEBUG(">  trimmed signal to %fs", sig1i*dt);
+		}
+	}
+	else if ( _config.durationScale > 0 ) {
+		sig1i = (int)((t05 + _config.durationScale* *_duration) * _stream.fsamp);
+		SEISCOMP_DEBUG(">  trimmed signal to %fs", sig1i*dt);
 	}
 
 	// Clip sig1i to number of samples
@@ -1034,17 +1055,17 @@ void PGAV::process(const Record *record, const DoubleArray &) {
 	std::vector<Complex> spectrum;
 	double df = 0.0;
 
-	if ( _config.noncausal ) {
+	if ( _config.noncausal || _config.useDeconvolution ) {
 		double Tzpad;
 
 		if ( _config.padLength < 0 ) {
-			Tzpad = 1.5*std::max(_config.SCorder, _config.filterOrder);
+			Tzpad = 1.5*std::max(_config.PDorder, _config.filterOrder);
 
-			if ( _config.loSCFreq > 0 && _config.SCorder > 0 &&
+			if ( _config.loPDFreq > 0 && _config.PDorder > 0 &&
 				 _config.loFilterFreq > 0 && _config.filterOrder > 0 )
-				Tzpad /= std::min(_config.loSCFreq, _config.loFilterFreq);
-			else if ( _config.loSCFreq > 0 && _config.SCorder > 0 )
-				Tzpad /= _config.loSCFreq;
+				Tzpad /= std::min(_config.loPDFreq, _config.loFilterFreq);
+			else if ( _config.loPDFreq > 0 && _config.PDorder > 0 )
+				Tzpad /= _config.loPDFreq;
 			else if ( _config.loFilterFreq > 0 && _config.filterOrder > 0 )
 				Tzpad /= _config.loFilterFreq;
 			else
@@ -1101,128 +1122,76 @@ void PGAV::process(const Record *record, const DoubleArray &) {
 	// Deconvolve data
 	// -------------------------------------------------------------------
 	if ( _config.useDeconvolution ) {
-		if ( _config.noncausal ) {
-			Sensor *sensor = _streamConfig[_usedComponent].sensor();
-	
-			// When using full responses then all information needs to be set up
-			// correctly otherwise an error is set
-			if ( !sensor ) {
-				SEISCOMP_DEBUG(">  no sensor information but deconvolution is enabled");
-				setStatus(MissingResponse, 1);
-				return;
-			}
-	
-			if ( !sensor->response() ) {
-				SEISCOMP_DEBUG(">  no responses but deconvolution is enabled");
-				setStatus(MissingResponse, 2);
-				return;
-			}
+		Sensor *sensor = _streamConfig[_usedComponent].sensor();
 
-			Math::Restitution::FFT::TransferFunctionPtr tf =
-				sensor->response()->getTransferFunction();
-	
-			if ( tf == NULL ) {
-				SEISCOMP_DEBUG(">  deconvolution failed, no transferfunction");
-				setStatus(DeconvolutionFailed, 1);
-				return;
-			}
-	
-			tf->deconvolve(spectrum, df, df);
+		// When using full responses then all information needs to be set up
+		// correctly otherwise an error is set
+		if ( !sensor ) {
+			SEISCOMP_DEBUG(">  no sensor information but deconvolution is enabled");
+			setStatus(MissingResponse, 1);
+			return;
 		}
-		else {
-			Sensor *sensor = _streamConfig[_usedComponent].sensor();
 
-			// When using full responses then all information needs to be set up
-			// correctly otherwise an error is set
-			if ( !sensor ) {
-				SEISCOMP_DEBUG(">  no sensor information but deconvolution is enabled");
-				setStatus(MissingResponse, 1);
-				return;
-			}
+		if ( !sensor->response() ) {
+			SEISCOMP_DEBUG(">  no responses but deconvolution is enabled");
+			setStatus(MissingResponse, 2);
+			return;
+		}
 
-			if ( !sensor->response() ) {
-				SEISCOMP_DEBUG(">  no responses but deconvolution is enabled");
-				setStatus(MissingResponse, 2);
-				return;
-			}
+		Math::Restitution::FFT::TransferFunctionPtr tf =
+			sensor->response()->getTransferFunction();
 
-			if ( !sensor->response()->deconvolveFFT(_data, _stream.fsamp, 0, 0, 0, 0) ) {
-				SEISCOMP_DEBUG(">  deconvolution failed");
-				setStatus(DeconvolutionFailed, 0);
-				return;
-			}
+		if ( tf == NULL ) {
+			SEISCOMP_DEBUG(">  deconvolution failed, no transferfunction");
+			setStatus(DeconvolutionFailed, 1);
+			return;
 		}
 
+		tf->deconvolve(spectrum, df, df);
 		SEISCOMP_DEBUG(">  applied deconvolution");
-	}
-	else
-		SEISCOMP_DEBUG(">  no deconvolution applied (disabled)");
 
-	// -------------------------------------------------------------------
-	// Optional sensor sensitivity filter
-	// -------------------------------------------------------------------
-	if ( _config.SCorder > 0 ) {
-		double fmin = _config.loSCFreq;
-		double fmax = _config.hiSCFreq;
+		// -------------------------------------------------------------------
+		// Optional post-deconvolution filter
+		// -------------------------------------------------------------------
+		if ( _config.PDorder > 0 ) {
+			double fmin = _config.loPDFreq;
+			double fmax = _config.hiPDFreq;
 
-		if ( fmin < 0 ) fmin = fabs(fmin) * fNyquist;
-		if ( fmax < 0 ) fmax = fabs(fmax) * fNyquist;
+			if ( fmin < 0 ) fmin = fabs(fmin) * fNyquist;
+			if ( fmax < 0 ) fmax = fabs(fmax) * fNyquist;
 
-		_loSCFilter = fmin;
-		_hiSCFilter = fmax;
+			_loPDFilter = fmin;
+			_hiPDFilter = fmax;
 
-		if ( fmin > 0 && fmax > 0 ) {
-			if ( _config.noncausal )
-				ButterworthBandpass_Acausal(spectrum, df, df, _config.SCorder, fmin, fmax);
-			else {
-				Math::Filtering::IIR::ButterworthHighpass<double> hp(_config.SCorder, fmin );
-				hp.setSamplingFrequency(_stream.fsamp);
-				hp.apply(_data.size(), _data.typedData());
-				Math::Filtering::IIR::ButterworthLowpass<double> lp(_config.SCorder, fmax);
-				lp.setSamplingFrequency(_stream.fsamp);
-				lp.apply(_data.size(), _data.typedData());
-
-				/*
-				Math::Filtering::IIR::ButterworthBandpass<double> bp(_config.SCorder, fmin, fmax);
-				bp.setSamplingFrequency(_comp.fsamp);
-				bp.apply(_data.size(), _data.typedData());
-				*/
+			if ( fmin > 0 && fmax > 0 ) {
+				ButterworthBandpass_Acausal(spectrum, df, df, _config.PDorder, fmin, fmax);
+				SEISCOMP_DEBUG(">  post deconvolution filter with bp%d_%.4f_%.4f", _config.PDorder, fmin, fmax);
 			}
-
-			SEISCOMP_DEBUG(">  correct sensitivity with bp%d_%.4f_%.4f", _config.SCorder, fmin, fmax);
-		}
-		else if ( fmin > 0 ) {
-			if ( _config.noncausal )
-				ButterworthHiPass_Acausal(spectrum, df, df, _config.SCorder, fmin);
-			else {
-				Math::Filtering::IIR::ButterworthHighpass<double> hp(_config.SCorder, fmin );
-				hp.setSamplingFrequency(_stream.fsamp);
-				hp.apply(_data.size(), _data.typedData());
+			else if ( fmin > 0 ) {
+				ButterworthHiPass_Acausal(spectrum, df, df, _config.PDorder, fmin);
+				SEISCOMP_DEBUG(">  post deconvolution filter with hp%d_%.4f", _config.PDorder, fmin);
 			}
-
-			SEISCOMP_DEBUG(">  correct sensitivity with hp%d_%.4f", _config.SCorder, fmin);
-		}
-		else if ( fmax > 0 ) {
-			if ( _config.noncausal )
-				ButterworthLoPass_Acausal(spectrum, df, df, _config.SCorder, fmax);
-			else {
-				Math::Filtering::IIR::ButterworthLowpass<double> lp(_config.SCorder, fmax);
-				lp.setSamplingFrequency(_stream.fsamp);
-				lp.apply(_data.size(), _data.typedData());
+			else if ( fmax > 0 ) {
+				ButterworthLoPass_Acausal(spectrum, df, df, _config.PDorder, fmax);
+				SEISCOMP_DEBUG(">  post deconvolution filter with lp%d_%.4f", _config.PDorder, fmax);
 			}
-
-			SEISCOMP_DEBUG(">  correct sensitivity with lp%d_%.4f", _config.SCorder, fmax);
+			else
+				SEISCOMP_DEBUG(">  no post deconvolution filter applied: disabled corner freqs (%f,%f)",
+				               fmin, fmax);
 		}
 		else
-			SEISCOMP_DEBUG(">  no sensitivity correction filter applied: disabled corner freqs (%f,%f)",
-			               fmin, fmax);
+			SEISCOMP_DEBUG(">  no post deconvolution filter applied: order <= 0 (%d)",
+			               _config.PDorder);
+
+		// Convert back to time domain
+		if ( !_config.noncausal )
+			Math::ifft(_data.size(), _data.typedData(), spectrum);
 	}
 	else
-		SEISCOMP_DEBUG(">  no sensitivity correction filter applied: filter order <= 0 (%d)", _config.SCorder);
-
+		SEISCOMP_DEBUG(">  no deconvolution applied (disabled)");
 
 	// -------------------------------------------------------------------
-	// 2nd stage filter
+	// Filter
 	// -------------------------------------------------------------------
 	if ( _config.filterOrder > 0 ) {
 		double fmin = _config.loFilterFreq;
@@ -1253,7 +1222,7 @@ void PGAV::process(const Record *record, const DoubleArray &) {
 				*/
 			}
 
-			SEISCOMP_DEBUG(">  2nd stage filter: bp%d_%.4f_%.4f", _config.filterOrder, fmin, fmax);
+			SEISCOMP_DEBUG(">  filter: bp%d_%.4f_%.4f", _config.filterOrder, fmin, fmax);
 		}
 		else if ( fmin > 0 ) {
 			if ( _config.noncausal )
@@ -1264,7 +1233,7 @@ void PGAV::process(const Record *record, const DoubleArray &) {
 				hp.apply(_data.size(), _data.typedData());
 			}
 
-			SEISCOMP_DEBUG(">  2nd stage filter: hp%d_%.4f", _config.filterOrder, fmin );
+			SEISCOMP_DEBUG(">  filter: hp%d_%.4f", _config.filterOrder, fmin );
 		}
 		else if ( fmax > 0 ) {
 			if ( _config.noncausal )
@@ -1275,14 +1244,14 @@ void PGAV::process(const Record *record, const DoubleArray &) {
 				lp.apply(_data.size(), _data.typedData());
 			}
 
-			SEISCOMP_DEBUG(">  2nd stage filter: lp%d_%.4f", _config.filterOrder, fmax);
+			SEISCOMP_DEBUG(">  filter: lp%d_%.4f", _config.filterOrder, fmax);
 
 		}
 		else
-			SEISCOMP_DEBUG(">  no 2nd stage filter applied: disabled corner freqs (%f,%f)", fmin, fmax);
+			SEISCOMP_DEBUG(">  no filter applied: disabled corner freqs (%f,%f)", fmin, fmax);
 	}
 	else
-		SEISCOMP_DEBUG(">  no 2nd stage filter applied: filter order <= 0 (%d)", _config.filterOrder);
+		SEISCOMP_DEBUG(">  no filter applied: filter order <= 0 (%d)", _config.filterOrder);
 
 	if ( _config.noncausal )
 		// Convert back to time domain
@@ -1466,7 +1435,8 @@ void PGAV::init() {
 	setAftershockRemovalEnabled(true);
 	setPreEventCutOffEnabled(true);
 	setDeconvolutionEnabled(false);
-	setSensitivityCorrectionFilterParams(0,0,0);
+	setDurationScale(1.5);
+	setPostDeconvolutionFilterParams(0,0,0);
 	setFilterParams(0,0,0);
 	setNonCausalFiltering(false, -1);
 	setPadLength(-1);
diff --git a/src/sed/apps/scwfparam/processors/pgav.h b/src/sed/apps/scwfparam/processors/pgav.h
index 5beb8fa..64d8a45 100644
--- a/src/sed/apps/scwfparam/processors/pgav.h
+++ b/src/sed/apps/scwfparam/processors/pgav.h
@@ -46,8 +46,8 @@ class PGAV : public TimeWindowProcessor {
 			bool    preEventCutOff;
 			bool    useDeconvolution;
 
-			int     SCorder;
-			double  loSCFreq, hiSCFreq;
+			int     PDorder;
+			double  loPDFreq, hiPDFreq;
 
 			int     filterOrder;
 			double  loFilterFreq, hiFilterFreq;
@@ -63,6 +63,8 @@ class PGAV : public TimeWindowProcessor {
 			double  STALTAratio;
 			double  STALTAmargin;
 
+			double  durationScale;
+
 			std::vector<double> dampings;
 			int     naturalPeriods;
 			bool    naturalPeriodsLog;
@@ -107,11 +109,12 @@ class PGAV : public TimeWindowProcessor {
 		void setAftershockRemovalEnabled(bool);
 		void setPreEventCutOffEnabled(bool);
 		void setDeconvolutionEnabled(bool);
+		void setDurationScale(double);
 
-		// Set the sensititive correction filter parameters
+		// Set the post deconvolution filter parameters
 		// If either fmin or fmax is negative, its absolute value taken
 		// as a scale of the Nyquist frequency (fabs(f)*Nyquist)
-		void setSensitivityCorrectionFilterParams(int order, double fmin, double fmax);
+		void setPostDeconvolutionFilterParams(int order, double fmin, double fmax);
 
 		// Set the filter parameters
 		// If either fmin or fmax is negative, its absolute value taken
@@ -141,8 +144,8 @@ class PGAV : public TimeWindowProcessor {
 		double PGV() const { return _pgv; }
 		const OPT(double) &duration() const { return _duration; }
 
-		double loSCFilterUsed() const { return _loSCFilter; }
-		double hiSCFilterUsed() const { return _hiSCFilter; }
+		double loPDFilterUsed() const { return _loPDFilter; }
+		double hiPDFilterUsed() const { return _hiPDFilter; }
 
 		double loFilterUsed() const { return _loFilter; }
 		double hiFilterUsed() const { return _hiFilter; }
@@ -170,8 +173,8 @@ class PGAV : public TimeWindowProcessor {
 		double      _pga, _pgv;
 		ResponseSpectra _responseSpectra;
 
-		double      _loSCFilter;
-		double      _hiSCFilter;
+		double      _loPDFilter;
+		double      _hiPDFilter;
 
 		double      _loFilter;
 		double      _hiFilter;
diff --git a/src/sed/apps/scwfparam/util.h b/src/sed/apps/scwfparam/util.h
index 8854644..65ebbc3 100644
--- a/src/sed/apps/scwfparam/util.h
+++ b/src/sed/apps/scwfparam/util.h
@@ -55,8 +55,8 @@ struct PGAVResult {
 	double           psa10;
 	double           psa30;
 	OPT(double)      duration;
-	int              scFilterOrder;
-	FilterFreqs      scFilter;
+	int              pdFilterOrder;
+	FilterFreqs      pdFilter;
 	int              filterOrder;
 	FilterFreqs      filter;
 	std::string      recordID;
diff --git a/src/sed/apps/scwfparam/wfparam.cpp b/src/sed/apps/scwfparam/wfparam.cpp
index b3ea87b..d90bd54 100644
--- a/src/sed/apps/scwfparam/wfparam.cpp
+++ b/src/sed/apps/scwfparam/wfparam.cpp
@@ -197,6 +197,8 @@ WFParam::Config::Config() {
 	STALTAratio = 3;
 	STALTAmargin = 5;
 
+	durationScale = 1.5;
+
 	dampings.push_back(5);
 	naturalPeriods = 100;
 	naturalPeriodsLog = false;
@@ -214,10 +216,10 @@ WFParam::Config::Config() {
 	filter.first = 0.025;
 	filter.second = 40;
 
-	// Sensitivity correction filter, which is disabled by default
-	SCorder = 4;
-	SCfilter.first = 0;
-	SCfilter.second = 0;
+	// Post deconvolution filter, which is disabled by default
+	PDorder = 4;
+	PDfilter.first = 0;
+	PDfilter.second = 0;
 
 	enableDeconvolution = true;
 	enableNonCausalFilters = false;
@@ -247,6 +249,7 @@ WFParam::Config::Config() {
 
 	testMode = false;
 	offline = false;
+	force = false;
 	logCrontab = true;
 	saveProcessedWaveforms = false;
 	saveSpectraFiles = false;
@@ -350,6 +353,7 @@ WFParam::WFParam(int argc, char **argv) : Application(argc, argv) {
 	NEW_OPT(_config.LTAlength, "wfparam.LTAlength");
 	NEW_OPT(_config.STALTAratio, "wfparam.STALTAratio");
 	NEW_OPT(_config.STALTAmargin, "wfparam.STALTAmargin");
+	NEW_OPT(_config.durationScale, "wfparam.durationScale");
 	NEW_OPT(_config.dampings, "wfparam.dampings");
 	NEW_OPT(_config.naturalPeriodsStr, "wfparam.naturalPeriods");
 	NEW_OPT(_config.naturalPeriodsLog, "wfparam.naturalPeriods.log");
@@ -363,12 +367,12 @@ WFParam::WFParam(int argc, char **argv) : Application(argc, argv) {
 	             "Mode", "lo-filter", "high-pass filter frequency");
 	NEW_OPT_FREQ(_config.filter.second, "wfparam.filter.hiFreq",
 	             "Mode", "hi-filter", "low-pass filter frequency");
-	NEW_OPT(_config.SCorder, "wfparam.sc.order",
+	NEW_OPT(_config.PDorder, "wfparam.pd.order",
 	        "Mode", "sc-order", "sensitivity correction filter order");
-	NEW_OPT_FREQ(_config.SCfilter.first, "wfparam.sc.loFreq",
-	             "Mode", "sc-lo-filter", "sensitivity correction high-pass filter frequency");
-	NEW_OPT_FREQ(_config.SCfilter.second, "wfparam.sc.hiFreq",
-	             "Mode", "sc-hi-filter", "sensitivity correction low-pass filter frequency");
+	NEW_OPT_FREQ(_config.PDfilter.first, "wfparam.pd.loFreq",
+	             "Mode", "pd-lo-filter", "post deconvolution high-pass filter frequency");
+	NEW_OPT_FREQ(_config.PDfilter.second, "wfparam.pd.hiFreq",
+	             "Mode", "pd-hi-filter", "post deconvolution low-pass filter frequency");
 	NEW_OPT(_config.enableDeconvolution, "wfparam.deconvolution");
 	NEW_OPT(_config.enableNonCausalFilters, "wfparam.filtering.noncausal");
 	NEW_OPT(_config.taperLength, "wfparam.filtering.taperLength");
@@ -404,6 +408,9 @@ WFParam::WFParam(int argc, char **argv) : Application(argc, argv) {
 	NEW_OPT_CLI(_config.offline, "Mode", "offline",
 	            "Do not connect to the messaging and to the database",
 	            false, true);
+	NEW_OPT_CLI(_config.force, "Mode", "force",
+	            "Force event processing even if a journal entry exists that processing has completed",
+	            false, true);
 	NEW_OPT_CLI(_config.testMode, "Messaging", "test",
 	            "Test mode, no messages are sent", false, true);
 	NEW_OPT_CLI(_config.dumpRecords, "Mode", "dump-records",
@@ -985,22 +992,26 @@ bool WFParam::addProcess(DataModel::Event *evt) {
 	ProcessPtr proc;
 	Processes::iterator pit = _processes.find(evt->publicID());
 	if ( pit == _processes.end() ) {
-		if ( query() ) {
-			DatabaseIterator it;
-			JournalEntryPtr entry;
-			it = query()->getJournalAction(evt->publicID(), JOURNAL_ACTION);
-			while ( (entry = static_cast<JournalEntry*>(*it)) != NULL ) {
-				if ( entry->parameters() == JOURNAL_ACTION_COMPLETED ) {
-					SEISCOMP_INFO("%s: found journal entry \"completely processed\", ignoring event",
-					              evt->publicID().c_str());
-					it.close();
-					return false;
+		if ( !_config.force ) {
+			if ( query() ) {
+				DatabaseIterator it;
+				JournalEntryPtr entry;
+				it = query()->getJournalAction(evt->publicID(), JOURNAL_ACTION);
+				while ( (entry = static_cast<JournalEntry*>(*it)) != NULL ) {
+					if ( entry->parameters() == JOURNAL_ACTION_COMPLETED ) {
+						SEISCOMP_INFO("%s: found journal entry \"completely processed\", ignoring event",
+						              evt->publicID().c_str());
+						it.close();
+						return false;
+					}
+					++it;
 				}
-				++it;
+				it.close();
+				SEISCOMP_DEBUG("No journal entry \"completely processed\" found, go ahead");
 			}
-			it.close();
-			SEISCOMP_DEBUG("No journal entry \"completely processed\" found, go ahead");
 		}
+		else
+			SEISCOMP_DEBUG("Force processing, journal ignored");
 
 		SEISCOMP_DEBUG("Adding process [%s]", evt->publicID().c_str());
 		proc = new Process;
@@ -1554,7 +1565,7 @@ int WFParam::addProcessor(const DataModel::WaveformStreamID &waveformID,
 	proc->setNonCausalFiltering(_config.enableNonCausalFilters, _config.taperLength);
 	proc->setPadLength(_config.padLength);
 	// -1 as hifreq: let the algorithm define the best frequency
-	proc->setSensitivityCorrectionFilterParams(_config.SCorder, _config.SCfilter.first, _config.SCfilter.second);
+	proc->setPostDeconvolutionFilterParams(_config.PDorder, _config.PDfilter.first, _config.PDfilter.second);
 	proc->setFilterParams(_config.order, _filter.first, _filter.second);
 	proc->setDeconvolutionEnabled(_config.enableDeconvolution);
 
@@ -2136,9 +2147,9 @@ void WFParam::setup(PGAVResult &res, Processing::PGAV *pgav) {
 	res.pga = pgav->PGA();
 	res.pgv = pgav->PGV();
 	res.duration = pgav->duration();
-	res.scFilterOrder = pgav->config().SCorder;
-	res.scFilter.first = pgav->loSCFilterUsed();
-	res.scFilter.second = pgav->hiSCFilterUsed();
+	res.pdFilterOrder = pgav->config().PDorder;
+	res.pdFilter.first = pgav->loPDFilterUsed();
+	res.pdFilter.second = pgav->hiPDFilterUsed();
 	res.filterOrder = pgav->config().filterOrder;
 	res.filter.first = pgav->loFilterUsed();
 	res.filter.second = pgav->hiFilterUsed();
@@ -2407,7 +2418,8 @@ void WFParam::collectResults() {
 				    << " year=\"" << year << "\" month=\"" << mon << "\" day=\"" << day << "\""
 				    << " hour=\"" << hour << "\" minute=\"" << min << "\" second=\"" << sec << "\" timezone=\"GMT\""
 				    << " locstring=\"" << evt->publicID() << " / "
-				    << org->latitude().value() << " / " << org->longitude().value() << "\"/>"
+				    << org->latitude().value() << " / " << org->longitude().value() << "\""
+				    << " created=\"" << Core::Time::GMT().seconds() << "\"/>"
 				    << endl;
 			}
 			catch ( exception &e ) {
@@ -2540,7 +2552,10 @@ void WFParam::writeShakeMapComponent(const PGAVResult *res, bool &stationTag,
 
 	if ( !stationTag ) {
 		*os << "  <station code=\"" << res->streamID.stationCode() << "\""
-			<< " name=\"" << res->streamID.stationCode() << "\"";
+			<< " name=\"" << res->streamID.stationCode() << "\""
+			<< " netid=\"" << res->streamID.networkCode() << "\"";
+		if ( loc && !loc->station()->network()->archive().empty() )
+			*os << " source=\"" << loc->station()->network()->archive() << "\"";
 		if ( sensor )
 			*os << " insttype=\"" << sensor->model() << "\"";
 		*os << " lat=\"" << loc->latitude() << "\""
@@ -2549,10 +2564,18 @@ void WFParam::writeShakeMapComponent(const PGAVResult *res, bool &stationTag,
 		stationTag = true;
 	}
 
+	*os << "    <comp name=\"";
+	if ( loc && !loc->code().empty() )
+		*os << loc->code();
+	else
+		*os << "--";
+	*os << ".";
+
 	if ( withComponent )
-		*os << "    <comp name=\"" << res->streamID.channelCode() << "\">" << endl;
+		*os << res->streamID.channelCode();
 	else
-		*os << "    <comp name=\"" << res->streamID.channelCode().substr(0,2) << "\">" << endl;
+		*os << res->streamID.channelCode().substr(0,2);
+	*os << "\">" << endl;
 
 	ios::fmtflags tmpf(os->flags());
 	streamsize tmpp(os->precision());
diff --git a/src/sed/apps/scwfparam/wfparam.h b/src/sed/apps/scwfparam/wfparam.h
index 3966f57..541b3f6 100644
--- a/src/sed/apps/scwfparam/wfparam.h
+++ b/src/sed/apps/scwfparam/wfparam.h
@@ -140,6 +140,8 @@ class WFParam : public Application {
 			double      STALTAratio;
 			double      STALTAmargin;
 
+			double      durationScale;
+
 			std::vector<double> dampings;
 			std::string naturalPeriodsStr;
 			int         naturalPeriods;
@@ -179,11 +181,12 @@ class WFParam : public Application {
 			int         order;
 			FilterFreqs filter;
 
-			int         SCorder;
-			FilterFreqs SCfilter;
+			int         PDorder;
+			FilterFreqs PDfilter;
 
 			bool        useMaximumOfHorizontals;
 			bool        offline;
+			bool        force;
 			bool        testMode;
 			bool        logCrontab;
 			bool        saveProcessedWaveforms;
